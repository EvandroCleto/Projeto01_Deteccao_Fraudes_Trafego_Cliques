2+2
q()
df_train_sample <- fread("train_sample.csv", stringsAsFactors = TRUE, sep = ",", header =T)
library(data.table)
library(C50)
library(caret)
library(ROCR)
library(pROC)
library(ROSE)
library(dplyr)
library(e1071)
df_train_sample <- fread("train_sample.csv", stringsAsFactors = TRUE, sep = ",", header =T)
setwd("C:/Users/evand/OneDrive/Cursos/Curso_FCD/1-BigDataRAzure/Arquivos/Cap22/Projeto01")
getwd()
df_train_sample <- fread("train_sample.csv", stringsAsFactors = TRUE, sep = ",", header =T)
df_train_sample$attributed_time <- NULL
df_train_sample$click_time <- NULL
df_train_sample$is_attributed <- as.factor(df_train_sample$is_attributed)
sapply(df_train_sample, function(x)sum(is.na(x)))# NÃ£o foram encontrados NAs
df_qtdeIP <- as.data.frame(df_train_sample %>%
group_by(ip) %>%
summarise(qtdeIP = n()))
fac_qtdeIP <- function(qtd){
if (qtd == 1) {
return(as.factor("1"))
}else if (qtd == 2 | qtd == 3 ) {
return(as.factor("2"))
}else {
return(as.factor("3"))
}
}
df_qtdeIP$nivQtIp <- sapply(df_qtdeIP$qtdeIP,fac_qtdeIP)
df_train_sample <- left_join(df_train_sample, df_qtdeIP)
View(df_train_sample)
modelo_sample <- randomForest( is_attributed ~ . ,
data = df_train_sample,
ntree = 100, nodesize = 10, importance = T)
library(randomForest)
modelo_sample <- randomForest( is_attributed ~ . ,
data = df_train_sample,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo_sample)
indice_Divisao <- sample(x = nrow(df_train_sample),
size = 0.8 * nrow(df_train_sample),
replace = FALSE)
dados_treino <- df_train_sample[indice_Divisao,]
dados_teste <- df_train_sample[-indice_Divisao,]
str(dados_treino)
df_train_sample$device <- NULL
df_train_sample$os <- NULL
df_train_sample$qtdeIP <- NULL
df_train_sample$nivQtIp <- NULL
str(df_qtdeIP)
View(df_train_sample)
str(df_train_sample)
indice_Divisao <- sample(x = nrow(df_train_sample),
size = 0.8 * nrow(df_train_sample),
replace = FALSE)
dados_treino <- df_train_sample[indice_Divisao,]
dados_teste <- df_train_sample[-indice_Divisao,]
dim(dados_teste)
dados_treino_bal <- ROSE(is_attributed ~ . , data = dados_treino, seed = 1)$data
prop.table(table(dados_treino_bal$is_attributed))
dados_teste_bal <- ROSE(is_attributed ~ ., data = dados_teste, seed = 1)$data
prop.table(table(dados_teste_bal$is_attributed))
dim(dados_treino_bal)
dim(dados_teste_bal)
modelo <- C5.0(is_attributed ~ ., data = dados_treino_bal)
previsoes <- predict(modelo, dados_teste_bal)
caret::confusionMatrix(dados_teste_bal$is_attributed, previsoes, positive = '1')
roc.curve(dados_teste_bal$is_attributed, previsoes, plotit = T, col = "red")
modelo_SVM <- svm(is_attributed ~ ., data = dados_treino_bal, scale = TRUE)
previsoes_SVM <- predict(modelo_SVM, newdata = dados_teste_bal)
caret::confusionMatrix(previsoes_SVM, dados_teste_bal$is_attributed)
roc.curve(dados_teste_bal$is_attributed, previsoes_SVM, plotit = T, col = "red")
crtl <- trainControl(method = 'repeatedcv', repeats = 3)
knn <- train(is_attributed ~ . ,
data = dados_treino_bal,
method = 'knn',
trControl = crtl,
tuneLength = 20)
knn
plot(knn)
Previsao_KNN <- predict(knn, newdata = dados_teste_bal)
Previsao_KNN
confusionMatrix(Previsao_KNN, dados_teste_bal$is_attributed)
roc.curve(dados_teste_bal$is_attributed, Previsao_KNN, plotit = T, col = "red")
?knn
